// **************************************************
// Mixin library
// Contains all sort of mixix
// ***************************************************/
// **************************************************
// Media queries for screen
// Set default for all media queries
// ***************************************************/
$mqBuffer: 1px !default;
$tablet-width: 768px !default;
$desktop-width: 1024px !default;

/// Mixin to make mediaqueries for phone, tablet and desktop
/// Changes to content are made in this mixin. Example in comment
/// Use like: @include media-queries ($tablet-width, $desktop-width)
@mixin media-queries($tablet-width, $desktop-width) {
  @media screen and (max-width: #{$tablet-width - $mqBuffer}) {
    // /* Mediaquery for Phones */
  }

  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - $mqBuffer}) {
    // /* Mediaquery for tablet */
  }

  @media (min-width: #{$desktop-width}) {
    // /* Mediaquery for desktop */
    // .grid-prod-img {
    //     grid-column: 2 / 5; 
    // }
    // .grid-prod-text {
    //     grid-column: 5 / 11; 
    // }
  }
}

/// Mixin to make mediaquery for phone
/// Changes are set up from call and inserted via @content
/// Use like: @include mq-phone ($tablet-width)
@mixin mq-phone ($tablet-width) {
  @media screen and (max-width: #{$tablet-width - $mqBuffer}) {
    /* PHONE MQ */
    @content;
  }
}

/// Mixin to make mediaquery for tablet
/// Changes are set up from call and inserted via @content
/// Use like: @include mq-tablet ($tablet-width, $destop-width)
/// mq-tablet1 is used when there's no mq for desktop
@mixin mq-tablet ($tablet-width, $destop-width) {
  @media screen and (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - $mqBuffer}) {
    /* TABLET MQ */
    @content;
  }
}

@mixin mq-tablet1 {
  @media screen and (min-width: #{$tablet-width}) {
    /* TABLET MQ */
    @content;
  }
}

/// Mixin to make mediaquery for desktop
/// Changes are set up from call and inserted via @content
/// Use like: @include mq-desktop ($destop-width)
@mixin mq-desktop ($destop-width) {
  @media screen and (min-width: #{$desktop-width}) {
    /* DESKTOP MQ */
    @content;
  }
}

/// Mixin to make custom mediaqueries
/// Changes are set up from call and inserted via @content
/// Use like: @include mq-tablet ($min, $max)
@mixin mq-custom($min, $max) {
  @media screen and (min-width: #{$min}) and (max-width: #{$max - $mqBuffer}) {
    /* CUSTOM MQ */
    @content;
  }
}

// **************************************************
// Definition grid
// Set default 
// ***************************************************/
$grid-klaes: null !default; 
$grid-fraction: 12 !default;
$grid-margin-aside: null !default;
$grid-rows: null !default;
$grid-gap: null !default;
$grid-background-color: inherit !default;

/// Define grid without class and with variable classname 
/// Changes to content are made both in this mixin and via @content.
/// without class: @include grid-def ($grid-fraction, ¤grid-template-rows, $grid-column-gap,$grid-background-color)
/// with class: @include grid-def-sel ($selector $grid-fraction, ¤grid-template-rows, $grid-column-gap,$grid-background-color)
@mixin grid-def ($grid-fraction, $grid-template-rows, $grid-column-gap, $grid-background-color) {
   
    display: grid;
    
    @if $grid-fraction > 0 {
      grid-template-columns: repeat($grid-fraction, 1fr);
    }

    @if $grid-template-rows=null {
      grid-template-rows: auto;
    }

    @else {
      grid-template-rows: $grid-template-rows
    }

    background-color: $grid-background-color;

    @content;
  }

  @mixin grid-def-sel ($selector, $grid-fraction, $grid-template-rows, $grid-column-gap, $grid-background-color) {
    #{$selector} {
      @include grid-def ($grid-fraction, $grid-template-rows, $grid-column-gap, $grid-background-color)
    }

    @content;
  }


// **************************************************
// Definition border
// Set default 
// ***************************************************/
$border-width: 0 !default;
$border-style: solid !default;
$border-radius: 0 !default;
$border-color: $default-border-color !default;
$selector: null !default;

/// Mixin to define border
/// Changes to content are made in this mixin.
/// Use like: @include def-border ($border-width, $border-style, $border-radius, $border-color)
/// 
@mixin border-def($border-width, $border-style, $border-radius, $border-color) {
  border-width: $border-width;
  border-style: $border-style;
  border-radius: $border-radius;
  border-color: $border-color;
  box-sizing: border-box;
}

@mixin border-def-sel ($selector, $border-width, $border-style, $border-radius, $border-color) {
  #{$selector} {
    @include border-def($border-width, $border-style, $border-radius, $border-color)
  }
}

/// Center content in container 
/// Changes to content are made in this mixin.
/// Use like: @include center-content 
@mixin center-content {
  .center-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }
}

/// Set shadow on an item
/// Changes to content are made set external 
/// Use like: @include item-shadow
@mixin item-shadow {
  .shadow-class {
    @content
  }
}
 
/// Set scale on an item
/// Changes to content are made in this mixin
/// Use like: @include item-scale ($ratio)
@mixin item-scale ($ratio) {
    -webkit-transform: scale($ratio);
       -moz-transform: scale($ratio);
        -ms-transform: scale($ratio);
         -o-transform: scale($ratio);
            transform: scale($ratio);
  
}

@mixin text-shadow ($string: 0 1px 3px rgba(0, 0, 0, 0.25)) {
  text-shadow: $string;
}
@mixin box-shadow ($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow:    $string;
  box-shadow:         $string;
}
@mixin drop-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
  -webkit-box-shadow:     $x $y $blur $spread rgba(0, 0, 0, $alpha);
  -moz-box-shadow:        $x $y $blur $spread rgba(0, 0, 0, $alpha);
  box-shadow:             $x $y $blur $spread rgba(0, 0, 0, $alpha);
}
@mixin inner-shadow ($x: 0, $y: 1px, $blur: 2px, $spread: 0, $alpha: 0.25) {
  -webkit-box-shadow: inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
  -moz-box-shadow:    inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
  box-shadow:         inset $x $y $blur $spread rgba(0, 0, 0, $alpha);
}

@mixin box-sizing ($type: border-box) {
  -webkit-box-sizing: $type;
  -moz-box-sizing:    $type;
  box-sizing:         $type;
}

@mixin border-radius ($radius: 5px) {
  -webkit-border-radius: $radius;
  -moz-border-radius:    $radius;
  border-radius:         $radius;

  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;
}
@mixin border-radiuses ($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
  -webkit-border-top-right-radius:    $topright;
  -webkit-border-bottom-right-radius: $bottomright;
  -webkit-border-bottom-left-radius:  $bottomleft;
  -webkit-border-top-left-radius:     $topleft;

  -moz-border-radius-topright:        $topright;
  -moz-border-radius-bottomright:     $bottomright;
  -moz-border-radius-bottomleft:      $bottomleft;
  -moz-border-radius-topleft:         $topleft;

  border-top-right-radius:            $topright;
  border-bottom-right-radius:         $bottomright;
  border-bottom-left-radius:          $bottomleft;
  border-top-left-radius:             $topleft;

  -moz-background-clip:    padding;
  -webkit-background-clip: padding-box;
  background-clip:         padding-box;
}

@mixin opacity ($opacity: 0.5) {
  -webkit-opacity:        $opacity;
  -moz-opacity:           $opacity;
  opacity:                $opacity;
}

@mixin scale ($factor) {
  transform:            scale($factor,$factor);
  -webkit-transform:      scale($factor,$factor);
  -moz-transform:          scale($factor,$factor);
  -ms-transform:           scale($factor,$factor);
  -o-transform:            scale($factor,$factor);
}

// @mixin ahref ($a-color: $color-back) {
//   color: $a-color;
//         font-family: $font-family-norm;
//     font-weight: $font-weight-norm; 
//     font-size: $font-size-nav; 
//     :hover {

//     }
// }